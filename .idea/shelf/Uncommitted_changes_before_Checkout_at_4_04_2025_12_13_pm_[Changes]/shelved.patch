Index: app/src/main/java/com/punchthrough/blestarterappandroid/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n * Copyright 2024 Punch Through Design LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npackage com.punchthrough.blestarterappandroid\r\n\r\nimport android.Manifest\r\nimport android.annotation.SuppressLint\r\nimport android.app.Activity\r\nimport android.app.AlertDialog\r\nimport android.bluetooth.BluetoothAdapter\r\nimport android.bluetooth.BluetoothDevice\r\nimport android.bluetooth.BluetoothManager\r\nimport android.bluetooth.le.ScanCallback\r\nimport android.bluetooth.le.ScanResult\r\nimport android.bluetooth.le.ScanSettings\r\nimport android.content.ActivityNotFoundException\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport android.provider.Settings\r\nimport android.widget.Toast\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.annotation.UiThread\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat // Import for checking permissions\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport androidx.recyclerview.widget.SimpleItemAnimator\r\nimport com.punchthrough.blestarterappandroid.ble.ConnectionEventListener\r\nimport com.punchthrough.blestarterappandroid.ble.ConnectionManager\r\nimport com.punchthrough.blestarterappandroid.databinding.ActivityMainBinding\r\nimport timber.log.Timber\r\nimport android.bluetooth.le.ScanFilter\r\nimport android.os.ParcelUuid\r\nimport android.os.VibratorManager // Import the VibratorManager class\r\nimport android.os.Build // Import Build for checking API levels\r\nimport android.os.Vibrator // Import the traditional Vibrator class\r\nimport android.os.Handler\r\nimport android.os.Looper\r\n\r\nprivate const val PERMISSION_REQUEST_CODE = 1\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n\r\n    /*******************************************\r\n     * Properties\r\n     *******************************************/\r\n\r\n    private lateinit var binding: ActivityMainBinding\r\n\r\n    private val bluetoothAdapter: BluetoothAdapter by lazy {\r\n        val bluetoothManager = getSystemService(Context.BLUETOOTH_SERVICE) as BluetoothManager\r\n        bluetoothManager.adapter\r\n    }\r\n\r\n    private val bleScanner by lazy {\r\n        bluetoothAdapter.bluetoothLeScanner\r\n    }\r\n\r\n    private val scanSettings = ScanSettings.Builder()\r\n        .setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY)\r\n        .build()\r\n\r\n    private var isScanning = false\r\n        set(value) {\r\n            field = value\r\n            runOnUiThread { binding.scanButton.text = if (value) \"Stop Scan\" else \"Start Scan\" }\r\n        }\r\n\r\n    private val scanResults = mutableListOf<ScanResult>()\r\n    private val scanResultAdapter: ScanResultAdapter by lazy {\r\n        ScanResultAdapter(scanResults) { result ->\r\n            if (isScanning) {\r\n                stopBleScan()\r\n            }\r\n            with(result.device) {\r\n                Timber.w(\"Connecting to $address\")\r\n                ConnectionManager.connect(this, this@MainActivity)\r\n            }\r\n        }\r\n    }\r\n\r\n    private val bluetoothEnablingResult = registerForActivityResult(\r\n        ActivityResultContracts.StartActivityForResult()\r\n    ) { result ->\r\n        if (result.resultCode == Activity.RESULT_OK) {\r\n            Timber.i(\"Bluetooth is enabled, good to go\")\r\n        } else {\r\n            Timber.e(\"User dismissed or denied Bluetooth prompt\")\r\n            promptEnableBluetooth()\r\n        }\r\n    }\r\n\r\n    private lateinit var vibrator: Vibrator // Declare a Vibrator instance\r\n\r\n    private var isToastShowing = false // Flag to track if a toast is currently displayed\r\n\r\n    /*******************************************\r\n     * Activity function overrides\r\n     *******************************************/\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityMainBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n        if (BuildConfig.DEBUG) {\r\n            Timber.plant(Timber.DebugTree())\r\n        }\r\n        binding.scanButton.setOnClickListener { if (isScanning) stopBleScan() else startBleScan() }\r\n        setupRecyclerView()\r\n\r\n        // Add this new code\r\n        // Remove or comment out the button click listener for trilateration\r\n        // binding.trilaterationButton.setOnClickListener {\r\n        //     val intent = Intent(this, trilateration::class.java)\r\n        //     startActivity(intent)\r\n        // }\r\n\r\n        // Disable the proceed button to prevent navigation to SelectedBeaconsActivity\r\n//        binding.proceedButton.isEnabled = false // Disable the button\r\n//        binding.proceedButton.alpha = 0.5f // Optionally, change the button's appearance to indicate it's disabled\r\n//\r\n//        binding.pointGraphButton.setOnClickListener {\r\n//            val intent = Intent(this, PointGraphActivity::class.java)\r\n//            startActivity(intent)\r\n//        }\r\n//\r\n//        // Add this new button\r\n//        binding.proceedButton.setOnClickListener {\r\n//            // Remove selection logic since no beacons can be selected\r\n//            Toast.makeText(this, \"No beacons can be selected\", Toast.LENGTH_SHORT).show()\r\n//        }\r\n\r\n        // Initialize the Vibrator based on API level\r\n        vibrator = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {\r\n            // For API level 31 and above, use VibratorManager\r\n            val vibratorManager = getSystemService(VibratorManager::class.java)\r\n            vibratorManager.defaultVibrator\r\n        } else {\r\n            // For lower API levels, use the traditional Vibrator\r\n            getSystemService(Context.VIBRATOR_SERVICE) as Vibrator\r\n        }\r\n\r\n        // Add this new code for the View Map button\r\n        binding.viewMapButton.setOnClickListener {\r\n            val intent = Intent(this, mapView::class.java)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n//        ConnectionManager.registerListener(connectionEventListener)\r\n        if (!bluetoothAdapter.isEnabled) {\r\n            promptEnableBluetooth()\r\n        }\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n        if (isScanning) {\r\n            stopBleScan()\r\n        }\r\n//        ConnectionManager.unregisterListener(connectionEventListener)\r\n    }\r\n\r\n    override fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<out String>,\r\n        grantResults: IntArray\r\n    ) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n        if (requestCode != PERMISSION_REQUEST_CODE) {\r\n            return\r\n        }\r\n        if (permissions.isEmpty() && grantResults.isEmpty()) {\r\n            Timber.e(\"Empty permissions and grantResults array in onRequestPermissionsResult\")\r\n            Timber.w(\"This is likely a cancellation due to user interaction interrupted\")\r\n            return\r\n        }\r\n\r\n        // Log permission request outcomes\r\n        val resultsDescriptions = grantResults.map {\r\n            when (it) {\r\n                PackageManager.PERMISSION_DENIED -> \"Denied\"\r\n                PackageManager.PERMISSION_GRANTED -> \"Granted\"\r\n                else -> \"Unknown\"\r\n            }\r\n        }\r\n        Timber.w(\"Permissions: ${permissions.toList()}, grant results: $resultsDescriptions\")\r\n\r\n        // A denied permission is permanently denied if shouldShowRequestPermissionRationale is false\r\n        val containsPermanentDenial = permissions.zip(grantResults.toTypedArray()).any {\r\n            it.second == PackageManager.PERMISSION_DENIED &&\r\n                !ActivityCompat.shouldShowRequestPermissionRationale(this, it.first)\r\n        }\r\n        val containsDenial = grantResults.any { it == PackageManager.PERMISSION_DENIED }\r\n        val allGranted = grantResults.all { it == PackageManager.PERMISSION_GRANTED }\r\n        when {\r\n            containsPermanentDenial -> {\r\n                Timber.e(\"User permanently denied granting of permissions\")\r\n                Timber.e(\"Requesting for manual granting of permissions from App Settings\")\r\n                promptManualPermissionGranting()\r\n            }\r\n            containsDenial -> {\r\n                // It's still possible to re-request permissions\r\n                requestRelevantBluetoothPermissions(PERMISSION_REQUEST_CODE)\r\n            }\r\n            allGranted && hasRequiredBluetoothPermissions() -> {\r\n                startBleScan()\r\n            }\r\n            else -> {\r\n                Timber.e(\"Unexpected scenario encountered when handling permissions\")\r\n                recreate()\r\n            }\r\n        }\r\n    }\r\n\r\n    /*******************************************\r\n     * Private functions\r\n     *******************************************/\r\n\r\n    /**\r\n     * Prompts the user to enable Bluetooth via a system dialog.\r\n     *\r\n     * For Android 12+, [Manifest.permission.BLUETOOTH_CONNECT] is required to use\r\n     * the [BluetoothAdapter.ACTION_REQUEST_ENABLE] intent.\r\n     */\r\n    private fun promptEnableBluetooth() {\r\n        if (hasRequiredBluetoothPermissions() && !bluetoothAdapter.isEnabled) {\r\n            Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE).apply {\r\n                bluetoothEnablingResult.launch(this)\r\n            }\r\n        }\r\n    }\r\n\r\n    @SuppressLint(\"MissingPermission, NotifyDataSetChanged\") // Check performed inside extension fun\r\n    private fun startBleScan() {\r\n        if (!hasRequiredBluetoothPermissions()) {\r\n            requestRelevantBluetoothPermissions(PERMISSION_REQUEST_CODE)\r\n        } else {\r\n            scanResults.clear()\r\n            scanResultAdapter.updateList(scanResults)\r\n            scanResultAdapter.notifyDataSetChanged()\r\n            bleScanner.startScan(null, scanSettings, scanCallback)\r\n            isScanning = true\r\n        }\r\n    }\r\n\r\n    @SuppressLint(\"MissingPermission\") // Check performed inside extension fun\r\n    private fun stopBleScan() {\r\n        if (hasRequiredBluetoothPermissions()) {\r\n            bleScanner.stopScan(scanCallback)\r\n            isScanning = false\r\n        }\r\n    }\r\n\r\n    @UiThread\r\n    private fun setupRecyclerView() {\r\n        binding.scanResultsRecyclerView.apply {\r\n            adapter = scanResultAdapter\r\n            layoutManager = LinearLayoutManager(\r\n                this@MainActivity,\r\n                RecyclerView.VERTICAL,\r\n                false\r\n            )\r\n            isNestedScrollingEnabled = false\r\n            itemAnimator.let {\r\n                if (it is SimpleItemAnimator) {\r\n                    it.supportsChangeAnimations = false\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    @UiThread\r\n    private fun promptManualPermissionGranting() {\r\n        AlertDialog.Builder(this)\r\n            .setTitle(R.string.please_grant_relevant_permissions)\r\n            .setMessage(R.string.app_settings_rationale)\r\n            .setPositiveButton(R.string.app_settings) { _, _ ->\r\n                try {\r\n                    startActivity(\r\n                        Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {\r\n                            data = Uri.parse(\"package:$packageName\")\r\n                            addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r\n                        }\r\n                    )\r\n                } catch (e: ActivityNotFoundException) {\r\n                    if (!isFinishing) {\r\n                        Toast.makeText(\r\n                            this,\r\n                            R.string.cannot_launch_app_settings,\r\n                            Toast.LENGTH_LONG\r\n                        ).show()\r\n                    }\r\n                }\r\n                finish()\r\n            }\r\n            .setNegativeButton(R.string.quit) { _, _ -> finishAndRemoveTask() }\r\n            .setCancelable(false)\r\n            .show()\r\n    }\r\n\r\n    /*******************************************\r\n     * Callback bodies\r\n     *******************************************/\r\n    // Beacon names\r\n    // 1. \"80:EC:CC:CD:33:28\" - Beacon EW1 - Project 1\r\n    // 2. \"80:EC:CC:CD:33:7C\" - Beacon EW2 - Project 2\r\n    // 3. \"80:EC:CC:CD:33:7E\" - Beacon EW3 - Project 3\r\n    // 4. \"80:EC:CC:CD:33:58\" - Beacon EW6 - Project 4\r\n    // 5. \"EC:81:F6:64:F0:86\" - Beacon Apple 06 - Project 5\r\n    // 6. \"6C:B2:FD:35:01:6C\" - Beeliner 03 - Project 6\r\n    // 7. \"E0:35:2F:E6:42:46\" - Beacon Apple 04 - Project 7\r\n    // 8. \"CB:31:FE:48:1B:CB\" - Beacon Apple 05 - Project 8\r\n    // 9. \"D8:F2:C8:9B:33:34\" - RDL 04 - Project 9\r\n    // 10. \"00:3C:84:28:87:01\" - RFstar-01 - Project 10\r\n    // 11. \"00:3C:84:28:77:AB\" - RFstar-05 - Project 11\r\n    val targetMacAddresses = listOf(\"80:EC:CC:CD:33:28\",\r\n                                    \"80:EC:CC:CD:33:7C\",\r\n                                    \"80:EC:CC:CD:33:7E\",\r\n                                    \"80:EC:CC:CD:33:58\",\r\n                                    \"EC:81:F6:64:F0:86\",\r\n                                    \"6C:B2:FD:35:01:6C\",\r\n                                    \"E0:35:2F:E6:42:46\",\r\n                                    \"CB:31:FE:48:1B:CB\",\r\n                                    \"D8:F2:C8:9B:33:34\",\r\n                                    \"00:3C:84:28:87:01\",\r\n                                    \"00:3C:84:28:77:AB\") // Replace with your target MAC addresses\r\n\r\n    private val beaconProjects = mapOf(\r\n        \"80:EC:CC:CD:33:28\" to \"Losing Things (LT)\",\r\n        \"80:EC:CC:CD:33:7C\" to \"Happy Mornings (HM)\",\r\n        \"80:EC:CC:CD:33:7E\" to \"STEM\",\r\n        \"80:EC:CC:CD:33:58\" to \"Visual Clutter\",\r\n        \"EC:81:F6:64:F0:86\" to \"Vision\",\r\n        \"6C:B2:FD:35:01:6C\" to \"Tactile Display\",\r\n        \"E0:35:2F:E6:42:46\" to \"GUIDE 1\",\r\n        \"CB:31:FE:48:1B:CB\" to \"GUIDE 2\",\r\n        \"D8:F2:C8:9B:33:34\" to \"Switch\",\r\n        \"00:3C:84:28:87:01\" to \"MAP\",\r\n        \"00:3C:84:28:77:AB\" to \"Dance\"\r\n    )\r\n\r\n\r\n    // If we're getting a scan result, we already have the relevant permission(s)\r\n    @SuppressLint(\"MissingPermission\")\r\n    private val scanCallback = object : ScanCallback() {\r\n        override fun onScanResult(callbackType: Int, result: ScanResult) {\r\n            // Check if the scanned device is already in the list\r\n            if (result.device.address in targetMacAddresses) {\r\n                val indexQuery = scanResults.indexOfFirst { it.device.address == result.device.address }\r\n                if (indexQuery != -1) { // A scan result already exists with the same address\r\n                    scanResults[indexQuery] = result // Update the existing result\r\n                    scanResultAdapter.notifyItemChanged(indexQuery)\r\n                } else {\r\n                    // New device found, add it to the list\r\n                    with(result.device) {\r\n                        Timber.i(\"Found BLE device! Name: ${name ?: \"Unnamed\"}, address: $address\")\r\n                    }\r\n                    scanResults.add(result) // Add the new result\r\n                    scanResultAdapter.notifyItemInserted(scanResults.size - 1)\r\n                }\r\n                // Check RSSI value and show toast if below -40 dBm\r\n                if (result.rssi > -50) {\r\n                    if (!isToastShowing) { // Check if a toast is already being shown\r\n                        Toast.makeText(this@MainActivity, \"Close to ${beaconProjects[result.device.address] ?: \"Unknown Beacon\"}\", Toast.LENGTH_SHORT).show()\r\n                        isToastShowing = true // Set the flag to true\r\n                        // Reset the flag after the toast duration\r\n                        Handler(Looper.getMainLooper()).postDelayed({\r\n                            isToastShowing = false\r\n                        }, Toast.LENGTH_SHORT.toLong()) // Duration of the toast\r\n                    }\r\n                    // Check if the VIBRATE permission is granted\r\n                    if (ContextCompat.checkSelfPermission(this@MainActivity, Manifest.permission.VIBRATE) == PackageManager.PERMISSION_GRANTED) {\r\n                        vibrator.vibrate(500) // Vibrate for 500 milliseconds\r\n                    } else {\r\n                        // Request the VIBRATE permission\r\n                        ActivityCompat.requestPermissions(this@MainActivity, arrayOf(Manifest.permission.VIBRATE), PERMISSION_REQUEST_CODE)\r\n                    }\r\n                }\r\n                // Sort the list by RSSI in descending order\r\n                scanResults.sortByDescending { it.rssi }\r\n                scanResultAdapter.notifyDataSetChanged() // Notify adapter of data change\r\n            }\r\n        }\r\n\r\n        override fun onScanFailed(errorCode: Int) {\r\n            Timber.e(\"onScanFailed: code $errorCode\")\r\n        }\r\n    }\r\n\r\n//    private val connectionEventListener by lazy {\r\n//        ConnectionEventListener().apply {\r\n//            onConnectionSetupComplete = { gatt ->\r\n//                Intent(this@MainActivity, BleOperationsActivity::class.java).also {\r\n//                    it.putExtra(BluetoothDevice.EXTRA_DEVICE, gatt.device)\r\n//                    startActivity(it)\r\n//                }\r\n//            }\r\n//            @SuppressLint(\"MissingPermission\")\r\n//            onDisconnect = {\r\n//                val deviceName = if (hasRequiredBluetoothPermissions()) {\r\n//                    it.name\r\n//                } else {\r\n//                    \"device\"\r\n//                }\r\n//                runOnUiThread {\r\n//                    AlertDialog.Builder(this@MainActivity)\r\n//                        .setTitle(R.string.disconnected)\r\n//                        .setMessage(\r\n//                            getString(R.string.disconnected_or_unable_to_connect_to_device, deviceName)\r\n//                        )\r\n//                        .setPositiveButton(R.string.ok, null)\r\n//                        .show()\r\n//                }\r\n//            }\r\n//        }\r\n//    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/punchthrough/blestarterappandroid/MainActivity.kt b/app/src/main/java/com/punchthrough/blestarterappandroid/MainActivity.kt
--- a/app/src/main/java/com/punchthrough/blestarterappandroid/MainActivity.kt	
+++ b/app/src/main/java/com/punchthrough/blestarterappandroid/MainActivity.kt	
@@ -21,7 +21,6 @@
 import android.app.Activity
 import android.app.AlertDialog
 import android.bluetooth.BluetoothAdapter
-import android.bluetooth.BluetoothDevice
 import android.bluetooth.BluetoothManager
 import android.bluetooth.le.ScanCallback
 import android.bluetooth.le.ScanResult
@@ -31,28 +30,25 @@
 import android.content.Intent
 import android.content.pm.PackageManager
 import android.net.Uri
+import android.os.Build
 import android.os.Bundle
+import android.os.Handler
+import android.os.Looper
+import android.os.Vibrator
+import android.os.VibratorManager
 import android.provider.Settings
 import android.widget.Toast
 import androidx.activity.result.contract.ActivityResultContracts
 import androidx.annotation.UiThread
 import androidx.appcompat.app.AppCompatActivity
 import androidx.core.app.ActivityCompat
-import androidx.core.content.ContextCompat // Import for checking permissions
+import androidx.core.content.ContextCompat
 import androidx.recyclerview.widget.LinearLayoutManager
 import androidx.recyclerview.widget.RecyclerView
 import androidx.recyclerview.widget.SimpleItemAnimator
-import com.punchthrough.blestarterappandroid.ble.ConnectionEventListener
 import com.punchthrough.blestarterappandroid.ble.ConnectionManager
 import com.punchthrough.blestarterappandroid.databinding.ActivityMainBinding
 import timber.log.Timber
-import android.bluetooth.le.ScanFilter
-import android.os.ParcelUuid
-import android.os.VibratorManager // Import the VibratorManager class
-import android.os.Build // Import Build for checking API levels
-import android.os.Vibrator // Import the traditional Vibrator class
-import android.os.Handler
-import android.os.Looper
 
 private const val PERMISSION_REQUEST_CODE = 1
 
@@ -157,11 +153,7 @@
             getSystemService(Context.VIBRATOR_SERVICE) as Vibrator
         }
 
-        // Add this new code for the View Map button
-        binding.viewMapButton.setOnClickListener {
-            val intent = Intent(this, mapView::class.java)
-            startActivity(intent)
-        }
+
     }
 
     override fun onResume() {
@@ -268,6 +260,7 @@
         if (hasRequiredBluetoothPermissions()) {
             bleScanner.stopScan(scanCallback)
             isScanning = false
+            binding.viewMapButton.isClickable = false
         }
     }
 
@@ -396,6 +389,23 @@
                         ActivityCompat.requestPermissions(this@MainActivity, arrayOf(Manifest.permission.VIBRATE), PERMISSION_REQUEST_CODE)
                     }
                 }
+                // Add this new code for the View Map button, send data of scanresults last rssi value
+//                binding.viewMapButton.setOnClickListener {
+//                    val intent = Intent(this@MainActivity, mapView::class.java)
+//                    intent.putExtra("scanResultsToMap", scanResults.last().rssi)
+//                    startActivity(intent)
+//                }
+
+                // testing selectedbeacons activity
+                binding.viewMapButton.setOnClickListener {
+                    val intent = Intent(this@MainActivity, SelectedBeaconsActivity::class.java)
+                    selectedBeacons = scanResults.forEach { item -> item.device}
+                    intent.putExtra("SELECTED_BEACONS", )
+                    startActivity(intent)
+                }
+
+
+
                 // Sort the list by RSSI in descending order
                 scanResults.sortByDescending { it.rssi }
                 scanResultAdapter.notifyDataSetChanged() // Notify adapter of data change
Index: app/BleConnectionWorker.kt
===================================================================
diff --git a/app/BleConnectionWorker.kt b/app/BleConnectionWorker.kt
new file mode 100644
--- /dev/null	
+++ b/app/BleConnectionWorker.kt	
@@ -0,0 +1,41 @@
+/*
+ * Copyright 2025 Punch Through Design LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import android.content.Context
+import androidx.work.CoroutineWorker
+import androidx.work.WorkerParameters
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.withContext
+
+class BluetoothWorker(context: Context, params: WorkerParameters) : CoroutineWorker(context, params) {
+
+    override suspend fun doWork(): Result = withContext(Dispatchers.IO) {
+        try {
+            // Initialize and manage your Bluetooth connection here
+            connectToBluetoothDevice()
+
+            // If the work was successful, return Result.success()
+            Result.success()
+        } catch (e: Exception) {
+            // Handle exceptions and return Result.retry() or Result.failure()
+            Result.retry()
+        }
+    }
+
+    private fun connectToBluetoothDevice() {
+        // Your Bluetooth connection logic here
+    }
+}
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n * Copyright 2024 Punch Through Design LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\napply plugin: 'com.android.application'\r\napply plugin: 'kotlin-android'\r\n\r\nandroid {\r\n    compileSdk 34\r\n    defaultConfig {\r\n        applicationId \"com.punchthrough.blestarterappandroid\"\r\n        minSdk 21\r\n        targetSdk 34\r\n        versionCode 2\r\n        versionName \"2.0\"\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n    buildFeatures {\r\n        viewBinding true\r\n        buildConfig true\r\n    }\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_17\r\n        targetCompatibility JavaVersion.VERSION_17\r\n    }\r\n    namespace 'com.punchthrough.blestarterappandroid'\r\n}\r\n\r\nconfigurations {\r\n    ktlint\r\n}\r\n\r\ndependencies {\r\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\r\n    implementation 'androidx.appcompat:appcompat:1.6.1'\r\n    implementation 'androidx.core:core-ktx:1.12.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'\r\n    implementation 'androidx.recyclerview:recyclerview:1.3.2'\r\n    implementation 'com.jakewharton.timber:timber:4.7.1'\r\n    implementation 'com.google.android.material:material:1.12.0'\r\n    implementation 'androidx.activity:activity:1.8.0'\r\n    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'\r\n\r\n    ktlint \"com.pinterest.ktlint:ktlint-cli:1.0.1\"\r\n\r\n    testImplementation 'junit:junit:4.13.2'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.5'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'\r\n}\r\n\r\ntask ktlint(type: JavaExec, group: \"verification\") {\r\n    description = \"Check Kotlin code style.\"\r\n    classpath = configurations.ktlint\r\n    main = \"com.pinterest.ktlint.Main\"\r\n    args \"src/**/*.kt\"\r\n}\r\ncheck.dependsOn ktlint\r\n\r\ntask ktlintFormat(type: JavaExec, group: \"formatting\") {\r\n    description = \"Fix Kotlin code style deviations.\"\r\n    classpath = configurations.ktlint\r\n    main = \"com.pinterest.ktlint.Main\"\r\n    args \"-F\", \"src/**/*.kt\"\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
--- a/app/build.gradle	
+++ b/app/build.gradle	
@@ -59,6 +59,10 @@
     implementation 'androidx.activity:activity:1.8.0'
     implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
 
+    implementation "androidx.work:work-runtime-ktx:2.7.0" // WorkManager
+    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.1" // Coroutines
+    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.1" // Coroutines
+
     ktlint "com.pinterest.ktlint:ktlint-cli:1.0.1"
 
     testImplementation 'junit:junit:4.13.2'
Index: app/src/main/res/layout/activity_point_graph.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout\r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\">\r\n\r\n    <com.github.mikephil.charting.charts.LineChart\r\n        android:id=\"@+id/lineChart\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"0dp\"\r\n        app:layout_constraintTop_toTopOf=\"parent\"\r\n        app:layout_constraintBottom_toTopOf=\"@+id/inputLayout\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"/>\r\n\r\n    <LinearLayout\r\n        android:id=\"@+id/inputLayout\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:orientation=\"vertical\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        android:padding=\"16dp\">\r\n\r\n        <EditText\r\n            android:id=\"@+id/xValueInput\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:hint=\"Enter X Value\"/>\r\n\r\n        <EditText\r\n            android:id=\"@+id/yValueInput\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:hint=\"Enter Y Value\"/>\r\n\r\n        <Button\r\n            android:id=\"@+id/addButton\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"Add Point\"/>\r\n    </LinearLayout>\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_point_graph.xml b/app/src/main/res/layout/activity_point_graph.xml
--- a/app/src/main/res/layout/activity_point_graph.xml	
+++ b/app/src/main/res/layout/activity_point_graph.xml	
@@ -26,12 +26,16 @@
             android:id="@+id/xValueInput"
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
+            android:inputType="numberDecimal"
+            android:autofillHints="name"
             android:hint="Enter X Value"/>
 
         <EditText
             android:id="@+id/yValueInput"
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
+            android:inputType="numberDecimal"
+            android:autofillHints="name"
             android:hint="Enter Y Value"/>
 
         <Button
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest\r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    >\r\n\r\n    <uses-permission android:name=\"android.permission.VIBRATE\" /> <!-- Add this line -->\r\n    <!-- Request legacy Bluetooth permissions on versions older than API 31 (Android 12). -->\r\n    <uses-permission\r\n        android:name=\"android.permission.BLUETOOTH\"\r\n        android:maxSdkVersion=\"30\"\r\n        />\r\n    <uses-permission\r\n        android:name=\"android.permission.BLUETOOTH_ADMIN\"\r\n        android:maxSdkVersion=\"30\"\r\n        />\r\n    <uses-permission\r\n        android:name=\"android.permission.ACCESS_COARSE_LOCATION\"\r\n        android:maxSdkVersion=\"30\"\r\n        />\r\n    <uses-permission\r\n        android:name=\"android.permission.ACCESS_FINE_LOCATION\"\r\n        android:maxSdkVersion=\"30\"\r\n        />\r\n    <uses-permission\r\n        android:name=\"android.permission.BLUETOOTH_SCAN\"\r\n        android:usesPermissionFlags=\"neverForLocation\"\r\n        tools:targetApi=\"s\"\r\n        />\r\n    <uses-permission android:name=\"android.permission.BLUETOOTH_CONNECT\" />\r\n\r\n    <uses-feature\r\n        android:name=\"android.hardware.bluetooth_le\"\r\n        android:required=\"true\"\r\n        />\r\n\r\n    <application\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/AppTheme\"\r\n        tools:ignore=\"GoogleAppIndexingWarning\"\r\n        >\r\n        <activity\r\n            android:name=\".mapView\"\r\n            android:screenOrientation=\"landscape\" \r\n            android:label=\"@string/app_name\"\r\n            android:exported=\"false\">\r\n            <!-- Force landscape mode -->\r\n        </activity>\r\n        <activity android:name=\".PointGraphActivity\" /> <!-- Add this line -->\r\n        <activity\r\n            android:name=\".trilateration\"\r\n            android:exported=\"false\"\r\n            />\r\n        <activity\r\n            android:name=\".BleOperationsActivity\"\r\n            android:exported=\"false\"\r\n            android:screenOrientation=\"portrait\"\r\n            />\r\n        <activity\r\n            android:name=\".MainActivity\"\r\n            android:exported=\"true\"\r\n            android:screenOrientation=\"portrait\"\r\n            >\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity> <!-- Add this line to declare the SelectedBeaconsActivity -->\r\n        <activity android:name=\".SelectedBeaconsActivity\" />\r\n    </application>\r\n\r\n</manifest>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
--- a/app/src/main/AndroidManifest.xml	
+++ b/app/src/main/AndroidManifest.xml	
@@ -44,10 +44,11 @@
         >
         <activity
             android:name=".mapView"
-            android:screenOrientation="landscape" 
             android:label="@string/app_name"
             android:exported="false">
             <!-- Force landscape mode -->
+            <!-- android:screenOrientation="landscape" --> <!-- remove this line (47) for when mapview leads to linechart
+             instead of map image-->
         </activity>
         <activity android:name=".PointGraphActivity" /> <!-- Add this line -->
         <activity
Index: app/src/main/java/com/punchthrough/blestarterappandroid/mapView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n * Copyright 2024 Punch Through Design LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npackage com.punchthrough.blestarterappandroid\r\n\r\nimport android.os.Bundle\r\nimport androidx.activity.enableEdgeToEdge\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.view.ViewCompat\r\nimport androidx.core.view.WindowInsetsCompat\r\n\r\nclass mapView : AppCompatActivity() {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        supportActionBar?.hide() // Hide the ActionBar\r\n        enableEdgeToEdge()\r\n        setContentView(R.layout.activity_map_view)\r\n        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->\r\n            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())\r\n            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)\r\n            insets\r\n        }\r\n    }\r\n}\r\n
===================================================================
diff --git a/app/src/main/java/com/punchthrough/blestarterappandroid/mapView.kt b/app/src/main/java/com/punchthrough/blestarterappandroid/mapView.kt
--- a/app/src/main/java/com/punchthrough/blestarterappandroid/mapView.kt	
+++ b/app/src/main/java/com/punchthrough/blestarterappandroid/mapView.kt	
@@ -16,22 +16,154 @@
 
 package com.punchthrough.blestarterappandroid
 
+import android.bluetooth.BluetoothAdapter
+import android.bluetooth.BluetoothManager
+import android.bluetooth.le.ScanResult
+import android.bluetooth.le.ScanSettings
+import android.content.Context
+import android.graphics.Color
 import android.os.Bundle
-import androidx.activity.enableEdgeToEdge
+import android.widget.Button
 import androidx.appcompat.app.AppCompatActivity
 import androidx.core.view.ViewCompat
 import androidx.core.view.WindowInsetsCompat
+import com.github.mikephil.charting.charts.LineChart
+import com.github.mikephil.charting.components.XAxis
+import com.github.mikephil.charting.components.YAxis
+import com.github.mikephil.charting.data.Entry
+import com.github.mikephil.charting.data.LineData
+import com.github.mikephil.charting.data.LineDataSet
+import com.github.mikephil.charting.interfaces.datasets.ILineDataSet
+import com.github.mikephil.charting.utils.ColorTemplate
+import com.punchthrough.blestarterappandroid.databinding.ActivityMainBinding
 
 class mapView : AppCompatActivity() {
+
+
+
+    private lateinit var lineChart: LineChart
+    private lateinit var binding: ActivityMainBinding
+
+    private val bluetoothAdapter: BluetoothAdapter by lazy {
+        val bluetoothManager = getSystemService(Context.BLUETOOTH_SERVICE) as BluetoothManager
+        bluetoothManager.adapter
+    }
+
+    private val bleScanner by lazy {
+        bluetoothAdapter.bluetoothLeScanner
+    }
+
+    private val scanSettings = ScanSettings.Builder()
+        .setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY)
+        .build()
+
+    private val scanResults = mutableListOf<ScanResult>()
+//    private val scanResultAdapter: ScanResultAdapter by lazy {
+//        ScanResultAdapter(scanResults) { result ->
+//            if (isScanning) {
+//                stopBleScan()
+//            }
+//            with(result.device) {
+//                Timber.w("Connecting to $address")
+//                ConnectionManager.connect(this, this@mapView)
+//            }
+//        }
+//    }
+
+
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
+        setContentView(R.layout.activity_point_graph)
         supportActionBar?.hide() // Hide the ActionBar
-        enableEdgeToEdge()
-        setContentView(R.layout.activity_map_view)
-        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
+        // enableEdgeToEdge()
+        // Retrieve the LineChart from the layout
+        lineChart = findViewById(R.id.lineChart)
+        initializeChart()
+        val receivedScanresults = intent.getIntExtra("scanResultsToMap",0)
+
+
+        // Retrieve the input fields and the button
+//        val xValueInput = findViewById<EditText>(R.id.xValueInput)
+//        val yValueInput = findViewById<EditText>(R.id.yValueInput)
+        val addButton = findViewById<Button>(R.id.addButton)
+
+
+        val yValueInput = 60
+        val xValueInput = receivedScanresults
+
+        // Handle button click to add points to the LineChart - user input
+        addButton.setOnClickListener {
+//            val xValue = xValueInput.text.toString().toFloatOrNull()
+//            val yValue = yValueInput.text.toString().toFloatOrNull()
+            val xValue = xValueInput.toFloat()
+            val yValue = yValueInput.toFloat()
+
+            if (xValue != null && yValue != null) {
+                addEntry(xValue, yValue)
+            } else {
+                // Show an error message or handle invalid input
+            }
+        }
+
+        // TODO: Get rssi on this page
+
+
+
+        // TODO: Use rssi to update x and y value entries
+
+
+
+        // Apply window insets for edge-to-edge display
+        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.lineChart)) { v, insets ->
             val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
             v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
             insets
         }
     }
+
+    private fun initializeChart() {
+        lineChart.description.isEnabled = false
+        lineChart.setTouchEnabled(true)
+        lineChart.isDragEnabled = true
+        lineChart.setScaleEnabled(true)
+        lineChart.setPinchZoom(true)
+
+        val xAxis = lineChart.xAxis
+        xAxis.position = XAxis.XAxisPosition.BOTTOM
+
+        lineChart.axisRight.isEnabled = false
+    }
+
+    private fun addEntry(x: Float, y: Float) {
+        val data = lineChart.data ?: LineData().also { lineChart.data = it }
+
+        var set: ILineDataSet? = data.getDataSetByIndex(0)
+        if (set == null) {
+            set = createSet()
+            data.addDataSet(set)
+        }
+
+        data.addEntry(Entry(x, y), 0)
+        data.notifyDataChanged()
+
+        lineChart.notifyDataSetChanged()
+        lineChart.setVisibleXRangeMaximum(20f)
+        lineChart.moveViewToX(data.entryCount.toFloat())
+    }
+
+    private fun createSet(): LineDataSet {
+        val set = LineDataSet(null, "Data Set")
+        set.axisDependency = YAxis.AxisDependency.LEFT
+        set.color = ColorTemplate.getHoloBlue()
+        set.setCircleColor(ColorTemplate.getHoloBlue())
+        set.lineWidth = 2f
+        set.circleRadius = 3f
+        set.fillAlpha = 65
+        set.fillColor = ColorTemplate.getHoloBlue()
+        set.highLightColor = Color.rgb(244, 117, 117)
+        set.valueTextColor = Color.BLACK
+        set.valueTextSize = 9f
+        set.setDrawValues(false)
+        return set
+    }
 }
